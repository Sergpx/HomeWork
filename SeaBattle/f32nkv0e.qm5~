#include "param.h"


char** createField() {
    char** field = new char* [FIELD_SIZE];
    for (int i = 0; i < FIELD_SIZE; i++) {
        field[i] = new char[FIELD_SIZE];
    }
    for (int i = 0; i < FIELD_SIZE; i++) {
        for (int j = 0; j < FIELD_SIZE; j++) {
            field[i][j] = SEA; // ~ = 126; 176
        }
    }
    return field;

}

bool isCanSetGorizontal(char** field, int x, int y, int deck){
    for (int y0 = y - 1; y0 <= y + 1; y0++) {

        for (int x0 = x - 1; x0 <= x + deck; x0++) {
            if (x0 >= FIELD_SIZE || x0 < 0 || y0 >= FIELD_SIZE || y0 < 0) { 
                //cout << "зона проверки за пределами поля, не важно" << endl;
                continue; 
            }
            if (field[y0][x0] != SEA) { 
                //cout << "зона проверки не море" << endl;
                return false; 
            }
        }

    }

    for (int x0 = x; x0 <= x + deck - 1 ; x0++) {
        if (x0 >= FIELD_SIZE || x0 < 0) {
            //cout << "Часть корабля за пределами поля" << endl;
            return false;
        }
    }
    return true;
}

void setGorizontal(char** field, int x, int y, int deck) {
    for (int x0 = x; x0 < x + deck; x0++) {
        field[y][x0] = SHIP;
    }
    //render(field);
}

bool isCanSetVertical(char** field, int x, int y, int deck) {
    bool flag = true;
    for (int y0 = y - deck; y0 <= y + 1; y0++) {


        for (int x0 = x - 1; x0 <= x + 1; x0++) {
            if (y0 < 0 || x0 < 0 || y0 >= FIELD_SIZE || x0 >= FIELD_SIZE) {
                //cout << "зона проверки за пределами поля, не важно" << endl;
                continue;
            }
            if (field[y0][x0] != SEA) {
                //cout << "зона проверки не море" << endl;
                return false;
            }
        }

    }
    for (int y0 = y - deck + 1; y0 <= y; y0++) {
        if (y0 < 0 || y0 >= FIELD_SIZE) {
            //cout << "Часть корабля за пределами поля" << endl;
            return false;
        }
    }
    return true;
}

void setVertical(char** field, int x, int y, int deck) {
    for (int y0 = y; y0 > y - deck; y0--) {
        field[y0][x] = SHIP;
    }
    //render(field);
}

bool isCanSetShip(int*& SHIPCount, int deck) {
    if (deck == 1) {
        if (SHIPCount[3] == 0) return true;
        else SHIPCount[3]--;
    }
    else if (deck == 2) {
        if (SHIPCount[2] == 0) return true;
        else SHIPCount[2]--;
    }
    else if (deck == 3) {
        if (SHIPCount[1] == 0) return true;
        else SHIPCount[1]--;
    }
    else if (deck == 4) {
        if (SHIPCount[0] == 0) return true;
        else SHIPCount[0]--;
    }
    else {
        cout << "Такого корабля нет!" << endl;
        return true;
    }
    return false;
}


void setShips(char** field) {
    int deck;
    char let;
    int x;
    int y;
    string direction;
    int* SHIPCount = new int[4] { 1, 2, 3, 4 };
    while ((SHIPCount[0] != 0 || SHIPCount[1] != 0 || SHIPCount[2] != 0 || SHIPCount[3] != 0)) {
        do {
            cout << "Сколько палубный корабль хотите разместить(1, 2, 3, 4)? ";
            cin >> deck;
        } while (isCanSetShip(SHIPCount, deck));
        direction = "G";
        cout << "Вериткально или Горизонтально (по умолчанию горизонтально)? (V/G)";
        cin >> direction;
        do {
            cout << "Введите координаты носа корабля ( буква и цифра ): ";
            cin >> let >> y;
            x = int(let) - 65;
            y--;

            if (direction == "V") {
                if (isCanSetVertical(field, x, y, deck)) {
                    setVertical(field, x, y, deck);
                    break;

                }
     